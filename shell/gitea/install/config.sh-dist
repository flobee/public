#!/bin/sh

# ---------------------------------------------------------------------
# Paths and settings you may want to change
# ---------------------------------------------------------------------

# ---------------------------------------------------------------------
# OS related packet manager to detect if packages are available or
# needs to be installed. For more see `pre-install.sh`
PKG_MANAGER='dpkg';
PKG_MANAGER_OPTS='-s'
PACKAGES_REQUIRED=' git wget sqlite3 curl';
PACKAGES_OPTIONAL='apt-transport-https ca-certificates ssl-cert';
PACKAGES_STOP_ON_INCOMPLETE='Y'; # If required packages are missing: Stop script

# the user for this installation (eg. the 'git' user in/for: /home/git where gitea will be installed)
USER=git;

# the port where gitea should be available
PORT=3001;

PATH_HOME='/home/git';                      # home of $USER

PATH_BACKUPS="$PATH_HOME/backups"           # path for backups

PATH_GITEA="$PATH_HOME/tea";                # gitea in /home/git/tea/

PATH_REPOSITORIES="$PATH_HOME/repositories" # repos in /home/git/repositories/

ACTION_ASKQUESTIONS='Y';                    # Ask or just use the config defaults (Y|N)? N for automisations
                                            # If 'N' all actions will perform without asking.

ACTION_TYPE='I';                            # Type of installation: I|U
                                            # I = Install (new installation) also possible for updates
                                            #     to detect OS changes
                                            # U = just updates (fast, maybe dont work on OS changes)

ACTION_BACKUPDEFAULT='Y';                   # default value for creating backups first: Y|N

# To install as a service set to 1 otherwise something different e.g: 0
INSTALL_AS_SERVICE=1



# ---------------------------------------------------------------------
# internals NOT for your custom `config.sh`!
# ---------------------------------------------------------------------

# gitea download url as var GITEA_BIN_URL to be installed by the installer.
# optional use a generic value: "latest" to scan github.com api to download the latest version (not recomment)
#GITEA_BIN_URL=https://dl.gitea.io/gitea/1.4.2/gitea-1.4.2-linux-amd64
#GITEA_BIN_URL=https://dl.gitea.io/gitea/1.12.3/gitea-1.12.3-linux-amd64
#GITEA_BIN_URL=https://github.com/go-gitea/gitea/releases/download/v1.12.3/gitea-1.12.3-linux-amd64
#GITEA_BIN_URL=https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64
#GITEA_BIN_URL=https://github.com/go-gitea/gitea/releases/download/v1.15.6/gitea-1.15.6-linux-amd64
GITEA_BIN_URL='latest';

# where this sources are located to fetch updates
GITEA_INSTALLER_BASEURL='https://raw.githubusercontent.com/flobee/public/master/shell/gitea/install';

DIRNAME_REPOSITORIES=`basename "${PATH_REPOSITORIES}"`

DIRNAME_GITEA=`basename "${PATH_GITEA}"`

TIMENOW=`date +'%Y%m%d-%H%M%S'`;

# check if 'latest'
if [ "${GITEA_BIN_URL}" = "latest" ]; then
    GITEA_VERSION=$(curl --silent "https://api.github.com/repos/go-gitea/gitea/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's|[v,]||g' )
    # detect OS/kernel
    if [ -n "$(uname -a | grep i386)" ]; then
        GITEA_BIN_URL="https://dl.gitea.io/gitea/${GITEA_VERSION}/gitea-${GITEA_VERSION}-linux-386";
    fi

    if [ -n "$(uname -a | grep x86_64)" ]; then
        GITEA_BIN_URL="https://dl.gitea.io/gitea/${GITEA_VERSION}/gitea-${GITEA_VERSION}-linux-amd64";
    fi

    if [ -n "$(uname -a | grep armv6l)" ]; then
        GITEA_BIN_URL="https://dl.gitea.io/gitea/${GITEA_VERSION}/gitea-${GITEA_VERSION}-linux-arm-6";
    fi

    if [ -n "$(uname -a | grep armv7l)" ]; then
        GITEA_BIN_URL="https://dl.gitea.io/gitea/${GITEA_VERSION}/gitea-${GITEA_VERSION}-linux-arm-7";
    fi
    #echo "Download 'latest' verison: ${GITEA_BIN_BASENAME}";
fi

GITEA_BIN_BASENAME=`basename "$GITEA_BIN_URL"`;
if [ "${GITEA_BIN_BASENAME}" = "" ]; then
    GITEA_BIN_BASENAME='gitea-bin';
fi

#DIR_OF_FILE="$(dirname $(readlink -f "$0"))";

# source basic functions in several [sub]scripts
#. ${DIR_OF_FILE}/shellFunctions.sh;
